
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *link;
};

struct node* push(int data)
{
    struct node* temp = (struct node *)malloc(sizeof(struct node));
    temp -> data = data ;
    temp -> link = NULL ;
    
}

void display(struct node *t)
{
    while(t)
    {
        printf("%d ",t->data);
        t = t -> link;
    }
}

int getlen(struct node *t)
{
    int count = 0;
    while(t)
    {
        t = t->link;
        count++;
    }
    
    return count;
}

struct node *padzeros(struct node *snode,int diff)
{
    if(snode == NULL)
    return NULL ;
    
    struct node *zhead = push(0);
    diff-- ;
    struct node *temp = zhead ;
    while(diff--)
    {
        temp -> link = push(0);
        temp = temp -> link;
    }
    temp -> link = snode ;
    
    
    return zhead;
}

struct node *subtractList(struct node *l1,struct node *l2,int borrow)
{
    if(l1 == NULL && l2 == NULL && borrow == 0)
    return NULL ;
    
    struct node *prev = subtractList(l1 ? l1->link : NULL , l2 ? l2->link  : NULL , borrow);
    
    int d1 = l1 -> data;
    int d2 = l2 -> data , sub = 0;
   
    if(borrow)
    {
        d1--;
        borrow = 0;
    }
    
    if(d1 < d2)
    {
        borrow = 1;
        d1 = d1 + 10;
    }
    
    sub = d1 - d2;
    
    struct node *cur = push(sub);

    cur -> link = prev;
    
    return cur;
}

struct node *subtract(struct node *l1,struct node *l2)
{
    if(l1 == NULL && l2 == NULL)
    return NULL;
    
    struct node *fnode = NULL , *snode = NULL ;
    
    int len1 = getlen(l1);
    int len2 = getlen(l2);
    
    struct node *temp1 = l1 , *temp2 = l2;
    
    // if length of both lists are not equal , then padd zeros 
    if(len1 != len2)
    {
        fnode = len1 > len2 ? l1 : l2;
        snode = len1 > len2 ? l2 : l1;
        snode = padzeros(snode , abs(len1 -len2));
    }
    else
    { 
        // if equal 
        while(l1 && l2)
        {
            if(l1 -> data != l2 -> data)
            {
                fnode = l1 -> data > l2 -> data ? temp1 : temp2 ;
                snode = l1 -> data > l2 -> data ? temp2 : temp1 ;
                break ;
            }
            l1 = l1 -> link ;
            l2 = l2 -> link ;
        }
    }
    int borrow = 0;
    
    return subtractList(fnode,snode,borrow);
    
}
int main()
{
    struct node *head1 = push(1);
    head1 -> link = push(0);
    head1 -> link -> link = push(0);
    
    struct node *head2 = push(1);
    
    display(head1);
    
    printf("\n");
    
    display(head2);
    
    printf("\n");
    
    struct node *res = subtract(head1,head2);
    
    display(res);
    

    return 0;
}
