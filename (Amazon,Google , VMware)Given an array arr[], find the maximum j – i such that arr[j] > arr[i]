//Time complexity :O(n)
//Google , Amazon and VMware Qn
#include <stdio.h>
#include<stdlib.h>
int max(int a,int b)
{
    return (a>b)? a:b;
}

int min(int a,int b)
{
    return (a<b)? a:b;
}

void maxjtoidiff(int a[],int n)
{
    int *lmin=(int*)malloc(sizeof(int)*n);
    int *rmax=(int*)malloc(sizeof(int)*n);
    int maxdiff;
    int i,j;
    
    // fill leftmin with min element
    lmin[0]=a[0];
    for(i=1;i<n;i++)
    lmin[i]=min(a[i],lmin[i-1]);
    
    //fill rightmax with max element
    rmax[n-1]=a[n-1];
    for(j=n-2;j>=0;j--)
    rmax[j]=max(a[j],rmax[j+1]);
    
    
    
    
    //travere the array
    i=0,j=0,maxdiff=-1;
    while(i<n && j<n)
    {
        //Similar to Merge sort
        if(lmin[i]<rmax[j])
        {
            maxdiff=max(maxdiff,j-i);
            j++;
        }
        else
        i++;
    }
    
    printf("%d",maxdiff);
}

int main()
{
    int a[]={9, 2, 3, 4, 5, 6, 7, 8, 18, 0}; 
   int n=sizeof(a)/sizeof(a[0]);
   
   maxjtoidiff(a,n);

    return 0;
}
